---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx

  # Annotations which will be understood by Litmus Operator 
  annotations:

    ## <--- Mandatory annotations to enable chaos on this app --->

    ### Analogy: similar to "Lock" feature in flux. If true, chaos occurs. Else, request for chaos is overridden
    litmus.io/chaos: "true"
 
    ### Analogy: similar to "volumeMount" request in stateful apps. The one that refers to "chaos claim" name
    litmus.io/experiment: "flaky-nginx"

spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80

---
## This is the chaos action/experiment profile requested for the nginx app. Triggers the actual litmus test/experiment job
## Analogy: Similar to PV Claim Request. This is chaos action requested by developer on nginx app
## Results of this experiment will be captured in the litmus result custom resource bearing name of generated job
## Refer: One day evolves to https://docs.google.com/document/d/14ySZyob45z-Zf7HmZbqfc2Lb6qbelU5OszurvZrPo50/edit#heading=h.6r97em67qahl

apiVersion: litmus.io/v1alpha1
kind: LitmusExperiment
metadata:

  ## Eventually launched chaos litmusbook/job will bear <name>-<hash>
  name: flaky-nginx

  ## Look for AUT (App-Under-Test) in this namespace
  namespace: nginx
  
  ## A predefined Chaos template type 
  ## Analogy: *Similar* in function to storage classes (in reality, closer spec-wise to a configmap or another CR). 
  ## This can be readily deployable from Litmus similar to storageclasses.yaml
  ## Will contain params "specific" to that chaos operation w/ default values. SRE/Dev/DevOps can update/apply & keep ready 
  ## Overrides for params aka storageclass annotations can be introduced. Maybe even reuse CAS templates model one day
  ## The use of this is that the *LitmusExperiment* resource, i.e., the interface to invoke chaos will be kept homogeneous. 
  type: pod-egress-delay

spec:
  ## This will be used to identify AUT 
  selector:   
    app: nginx
 
  ## Component list can be kept to a minimum
  component:
    container: "nginx" 
    nwinterface: "eth0"
    node: "" # n/a
    pvc: ""  # n/a
    disk: "" # n/a

  ## Schedule chaos attributes
  ## NOTE: An app can be subject to more than 1 LE w/ their own schedules

  schedule:
    # quarter-hourly, half-hourly, hourly, bi-hourly, trihoral, daily
    interval: "hourly"
    excluded-times: "22:00-08:00,11:00-13:00"
    excluded-days: "Sat,Sun"

  ## Attribute to say whether Litmus Operator can schedule another chaos experiment..
  ## ..if there is an ongoing experiment on the same app (same experiment or different)
  ## Can be determined via OwnerReferences, say, app-deployment name

  ## Supported values: Forbid, Allow 

  concurrencyPolicy: "Forbid" 

---
## Chaos template referred in LitmusExperiment as "type". Allows granular definition of a chaos experiment
## By bundling chaos specifics under attribute "data", we make it flexible

apiVersion: litmus.io/v1alpha1
kind: ChaosTemplate
metadata: 
  name: pod-egress-delay
spec:
  data: |
    delay: "600ms"
    runtime: "120s"
    jitter: "10ms"
    ditribution: "pareto"
  

  
